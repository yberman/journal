#!/usr/bin/env python3
# journal -- simple script to back up my journal.txt file

import os
import re

home = os.environ["HOME"]
journal_path = os.path.join(home, 'journal.txt')
assert os.path.exists(journal_path), "no journal file found"

# make sure the journal directory exists, is a git repo, switch to it.
journal_dir = os.path.join(home, ".journal")
if os.path.exists(journal_dir):
    assert os.path.isdir(journal_dir), "%s is not a directory" % journal_dir
else:
    os.mkdir(journal_dir)
    with open(os.path.join(journal_dir, "README"), "w") as readme:
        readme.write("backup for journal.txt")
    os.chdir(journal_dir)
    os.system("git init")
os.chdir(journal_dir)


dateline_pattern = re.compile("^[0-9]{4}-[0-9]{2}-[0-9]{2} [a-zA-Z]{2}$")

def check_dateline(dateline):
    if not dateline_pattern.match(dateline):
        return False
    days_of_week = ["Mo", "Tu", "We", "Th", "Fr", "Sa", "Su"]
    if not dateline.split()[1] in days_of_week:
        return False
    return True

journal_entries = []

with open(journal_path) as journal:
    day = []
    for line in journal:
        line = line.strip()
        if dateline_pattern.match(line):
            assert check_dateline(line), "problem with dateline: " + line
            if day:
                journal_entries.append(day)
            day = []
        day.append(line)
    if day is not None:
        journal_entries.append(day)

assert len(journal_entries) > 0, "journal is empty"

for entry_lines in journal_entries:
    assert check_dateline(entry_lines[0])
    filename = entry_lines[0].split()[0] + ".txt"
    epath = os.path.join(journal_dir, filename)
    with open(epath, "w") as entry:
        entry.writelines(entry_lines)


os.system("git add .")
os.system("git commit")
